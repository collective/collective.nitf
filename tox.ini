[tox]
envlist =
#    py27-lint,
#    black-check,
    py27-Plone43,
    py27-Plone43_TEST_EGGS_COVER
    py27-Plone43_TEST_EGGS_PAC
#    docs,
#    coverage-report,

skip_missing_interpreters = True


[gh-actions]
python =
    2.7: py27


[gh-actions:env]
PLONE-VERSION =
    Plone43: Plone43
    Plone43_TEST_EGGS_COVER: Plone43_TEST_EGGS_COVER
    Plone43_TEST_EGGS_PAC: Plone43_TEST_EGGS_PAC


[testenv]
skip_install = true

extras =
    develop
    test

commands =
    {envbindir}/buildout -q -c {toxinidir}/{env:version_file} buildout:directory={envdir} buildout:develop={toxinidir} bootstrap
#    {envbindir}/buildout -c {toxinidir}/{env:version_file} buildout:directory={envdir} buildout:develop={toxinidir} annotate
    {envbindir}/buildout -n -qq -c {toxinidir}/{env:version_file} buildout:directory={envdir} buildout:develop={toxinidir} buildout:test-eggs={env:TEST_EGGS} install test
    coverage run {envbindir}/test -v1 --auto-color {posargs}
    # coverage run {envbindir}/test -v --all -t robot {posargs}

setenv =
    COVERAGE_FILE=.coverage.{envname}
    version_file=test_plone43.cfg
    TEST_EGGS=
    Plone43: version_file=test_plone43.cfg
    Plone43_TEST_EGGS_COVER: TEST_EGGS=collective.cover[test]
    Plone43_TEST_EGGS_COVER: version_file=test_plone43.cfg
    Plone43_TEST_EGGS_PAC: TEST_EGGS=plone.app.contenttypes
    Plone43_TEST_EGGS_PAC: version_file=test_plone43.cfg

passenv =
    DISPLAY

deps =
    -rrequirements.txt
    Plone43: -cconstraints_plone43.txt
    coverage

[testenv:coverage-report]
skip_install = true
usedevelop = True
basepython = python2.7

deps =
    coverage
    -cconstraints_plone43.txt

setenv =
    COVERAGE_FILE=.coverage

commands =
    coverage erase
    coverage combine
    coverage html
    coverage xml
    coverage report


[lint]
skip_install = true

deps =
    -cconstraints.txt
    isort
    flake8
    # helper to generate HTML reports:
    flake8-html
    # Useful flake8 plugins that are Python and Plone specific:
    flake8-coding
    flake8-debugger
    flake8-deprecated
    flake8-print
    #flake8-pytest
    flake8-todo
    mccabe
    # Potential flake8 plugins that should be used:  # TBD
    #flake8-blind-except
    #flake8-commas
    #flake8-docstrings
    #flake8-mypy
    #flake8-pep3101
    #flake8-plone-hasattr
    #flake8-string-format
    #flake8_strict
    #flake8-quotes
    #flake8-polyfill

commands =
    mkdir -p {toxinidir}/reports/flake8
    - flake8 --format=html --htmldir={toxinidir}/reports/flake8 --doctests {toxinidir}/src {toxinidir}/setup.py
    flake8 --doctests {toxinidir}/src {toxinidir}/setup.py
    isort --check-only {toxinidir}/src {toxinidir}/setup.py
    # black --check --diff -v {toxinidir}/src {toxinidir}/setup.py

whitelist_externals =
    mkdir


[testenv:isort-apply]
skip_install = true

deps =
    -cconstraints.txt
    isort

commands =
    isort {toxinidir}/src {toxinidir}/setup.py


[testenv:black-check]
basepython = python3.7
skip_install = True
deps =
    -cconstraints.txt
    black

commands =
    black --check --diff -v src setup.py


[testenv:black-enforce]
basepython = python3.7
skip_install = True
deps =
    -cconstraints.txt
    black

commands =
    black -v src setup.py


[testenv:py27-lint]
basepython = python2.7
skip_install = true
deps = {[lint]deps}
commands = {[lint]commands}
whitelist_externals = {[lint]whitelist_externals}

[testenv:docs]
skip_install = true

deps =
    Sphinx

commands =
    sphinx-build -b html -d _build/docs/doctrees docs _build/docs/html
